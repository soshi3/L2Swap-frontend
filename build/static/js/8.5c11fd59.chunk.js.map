{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","../node_modules/lodash/max.js","../node_modules/lodash/_baseExtremum.js","../node_modules/lodash/_baseGt.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","eq","CardBusdValue","color","style","marginTop","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","id","disabled","length","onClick","width","count","UnlockButton","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","farmsLP","useFarms","prices","useGetApiPrices","cakePrice","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","getAddress","quoteToken","toLowerCase","totalLiquidity","times","getFarmApr","poolWeight","maxApr","max","toLocaleString","maximumFractionDigits","animation","variant","height","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","CTACards","BaseLayout","sm","Home","Page","FarmStakingCard","tokenAddress","web3","useWeb3","contract","getBep20Contract","methods","balanceOf","call","fetchBalance","prefix","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","props","baseExtremum","require","baseGt","identity","module","exports","array","isSymbol","iteratee","comparator","computed","result","other"],"mappings":"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","file":"static/js/8.5c11fd59.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ marginTop:'5px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ marginTop: '5px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: rgba(0, 0, 0, 0.7);\n  //background-image: url('/images/memeunited-log 4.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  border-radius: 16px;\n  backdrop-filter: blur(20px);\n  border: 2px solid #FF9300;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"18px\" color=\"#FF9300\">\n          {TranslateString(542, 'LAMA Reward')}\n        </Heading>\n        {/* <CardImage src=\"/images/memeunited-log 3.png\" alt=\"cake logo\" width={64} height={64} style={{ marginBottom: '28px' }} /> */}\n        <Block>\n          <Label>{TranslateString(544, 'LAMA to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'LAMA in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CAKE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { getFarmApr } from 'utils/apr'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: 16px;\n  backdrop-filter: blur(20px);\n  border: 2px solid #FF9300;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const prices = useGetApiPrices()\n  const cakePrice = usePriceCakeBusd()\n\n  const highestApr = useMemo(() => {\n    const aprs = farmsLP\n      // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken && prices) {\n          const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApr(farm.poolWeight, cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApr = max(aprs)\n    return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }, [cakePrice, farmsLP, prices])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {highestApr ? (\n            `${highestApr}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            APR in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: 16px;\n  backdrop-filter: blur(20px);\n  border: 2px solid #FF9300;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAssetCard = () => {\n  const activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\n  const latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n  // Always include CAKE\n  const assets = [ ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn\n        </Heading>\n        <CardMidContent color=\"#FF9300\">{assets}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Pools\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: stretch;\n  margin-bottom: 32px;\n  justify-content: stretch;\n  \n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      {/* <Cards> */}\n      {/*  <LotteryCard /> */}\n      {/* </Cards> */}\n      {/* <WinCard /> */}\n      <CTACards>\n        <FarmStakingCard />\n        <EarnAPRCard />\n        <EarnAssetCard />\n      </CTACards>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"sourceRoot":""}