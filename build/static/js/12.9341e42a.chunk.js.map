{"version":3,"sources":["views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","Wrapper","styled","div","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","name","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","StyledTokenInput","theme","colors","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","onClick","mr","color","bold","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","ModalActions","disabled","isFinite","eq","gt","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","account","useWeb3React","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","padding","border","boxSizing","borderRadius","textTransform","pr","marginTop","mt","UnlockButton","tokenEarnedPerThousandDollarsCompounding","number","numberOfDays","aprAsDecimal","farmApr","daysAsDecimalOfYear","principal","tokenPrice","finalAmount","Math","round","getRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","ApyCalculatorModal","apr","linkLabel","linkHref","earningTokenSymbol","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","props","expanded","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","ExpandableSectionButton","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","primary","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","css","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","marginBottom","Object","keys","key","columnIndex","indexOf","React","createElement","card","dropShadow","TableWrapper","TableContainer","table","tbody","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","boxShadow","DropDownList","ul","ListItem","li","inputSecondary","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Farms","path","pathname","useLocation","farmsLP","useFarms","query","setQuery","usePersistState","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","stakedOnly","setStakedOnly","includes","activeFarms","filter","inactiveFarms","stakedOnlyFarms","stakedInactiveFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","farmsStaked","rowData","farms","orderBy","slice","sortFarms","PageHeader","background","fontFamily","fontStyle","fontWeight","lineHeight","Page","checked","marginLeft","length","sort","b","exact","renderContent","CardValue","prefix","aria-label","role","defaultProps"],"mappings":"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","file":"static/js/12.9341e42a.chunk.js","sourcesContent":["export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n        </StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceNumber = Number(balance)\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\n    }\n    return balanceNumber.toLocaleString()\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance(max)}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const cakePrice = usePriceCakeBusd()\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <div style={{ padding: \"10px 20px\", border: \"1px solid #FF9300\", boxSizing: \"border-box\", borderRadius: \"16px\" }}>\n        <Flex>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n            {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n            CAKE\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {TranslateString(1072, 'Earned')}\n          </Text>\n        </Flex>\n        <HarvestAction earnings={earnings} pid={pid} />\n      </div>\n      <div style={{ padding: \"10px 20px\", border: \"1px solid #FF9300\", boxSizing: \"border-box\", borderRadius: \"16px\", marginTop: \"22px\" }}>\n        <Flex>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n            {lpName}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {TranslateString(1074, 'Staked')}\n          </Text>\n        </Flex>\n        {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n      </div>\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const tokenEarnedPerThousandDollarsCompounding = ({ numberOfDays, farmApr, tokenPrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const aprAsDecimal = farmApr / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'CAKE',\n}) => {\n  const TranslateString = useI18n()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {earningTokenSymbol} {TranslateString(999, 'per')} $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfToken })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfToken })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport useI18n from 'hooks/useI18n'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={`${TranslateString(999, 'Get')} ${lpLabel}`}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: 16px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'CAKE'\n\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n\n  return (\n    <FCard>\n      {farm.token.symbol === 'CAKE' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(736, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://rinkeby.etherscan.io/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          // infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const amountEarned = account ? earnings : null\n\n  const displayBalance = amountEarned ? amountEarned.toLocaleString() : '?'\n  return <Amount earned={amountEarned}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const TranslateString = useI18n()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && TranslateString(658, 'Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, useTooltip } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n  const tooltipContent = (\n    <div>\n      {TranslateString(999, 'The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {TranslateString(\n        999,\n        'For example, if a 1x farm was getting 1 LAMA per block, a 40x farm would be getting 40 LAMA per block.',\n      )}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, 'top-end', 'hover', undefined, undefined, [\n    20,\n    10,\n  ])\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, useTooltip } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    TranslateString(999, 'The total value of the funds in this farm’s liquidity pool'),\n    'top-end',\n    'hover',\n    undefined,\n    undefined,\n    [20, 10],\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 1px solid #FF9300;\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const cakePrice = usePriceCakeBusd()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>LAMA {TranslateString(1072, 'EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n          style={{ borderRadius: \"100px\" }}\n        >\n          {TranslateString(562, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({ pid, lpSymbol, lpAddresses, quoteToken, token }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background: #292E3E;\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n  border-bottom: 2px solid #FF9300;\n  border-right: 2px solid #FF9300;\n  border-left: 2px solid #FF9300;\n  border-radius: 0 0 16px 16px;\n  \n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity}) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://rinkeby.etherscan.io/address/${lpAddress}`\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n\n  return (\n    <Container>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://l2swap-exchange.herokuapp.com/#/add/${liquidityUrlPathParts}`}>\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n        {/* <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal> */}\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.div< { actionPanelToggled:boolean }>`\n  display: flex;\n  justify-content: space-between;\n  cursor: pointer;\n  border-radius: ${({ actionPanelToggled }) => actionPanelToggled ? css`16px 16px 0 0;` : css`16px;` };\n  border: 2px solid #FF9300;\n  border-bottom: ${({ actionPanelToggled }) => actionPanelToggled ? css`0;` : css`` };\n  background: #000000;\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel} actionPanelToggled={actionPanelToggled}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel} actionPanelToggled={actionPanelToggled}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <ActionPanel {...props}/>\n      )}\n    </div>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          {rows.map((row) => {\n            return (\n              <Row {...row.original} key={`table-row-${row.id}`} />\n            )\n          })}\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\" >\n        <ButtonMenuItem as={Link} to={`${url}`}  >\n          {TranslateString(1198, 'Live')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(388, 'Finished')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\n\nconst StyledInput = styled(Input)`\n  border-radius: 4px;\n  margin-left: auto;\n  border: 1px solid #FF9300;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  \n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"md\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"md\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid #FF9300;\n  border-radius: 4px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid #FF9300  ;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 4px 4px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid #FF9300;\n        border-top-width: 0;\n        border-radius: 0 0 4px 4px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport { getAddress } from 'utils/addressHelpers'\nimport PageHeader from 'components/PageHeader'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = usePersistState(false, 'pancake_farm_staked')\n  const isActive = !pathname.includes('history')\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n      case 'multiplier':\n        return orderBy(\n          farms,\n          (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, prices, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n\n  const rowData = farmsStaked.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader background=\"rgba(0, 0, 0, 0.7)\">\n        <Text fontFamily=\"Poppins\" fontStyle=\"normal\" fontWeight=\"600\" fontSize=\"40px\" lineHeight=\"26px\">\n          {TranslateString(674, 'Farms')}\n        </Text>\n        <Text fontFamily=\"Poppins\" fontStyle=\"normal\" fontWeight=\"600\" fontSize=\"20px\" lineHeight=\"26px\" marginTop=\"17px\">\n          {TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\n        </Text>\n        <Text fontFamily=\"Poppins\" fontStyle=\"normal\" fontWeight=\"600\" fontSize=\"14px\" lineHeight=\"26px\" marginTop=\"10px\">\n          {TranslateString(999, 'Notice: If you are staking a token with tax (tokenomics), you will incur tax when staking and unstaking.')}\n        </Text>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text fontFamily=\"Poppins\" fontStyle=\"normal\" fontWeight=\"normal\" fontSize=\"14px\" lineHeight=\"21px\" marginLeft=\"10px\">\n                {TranslateString(1116, 'Staked only')}\n              </Text>\n            </ToggleWrapper>\n            <FarmTabButtons />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>Sort By</Text>\n              <Select\n                options={[\n                  {\n                    label: 'Hot',\n                    value: 'hot',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? TranslateString(1066, 'Hide') : TranslateString(658, 'Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n"],"sourceRoot":""}